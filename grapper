#!/usr/bin/env python3
import os
import subprocess
import sys
import fnmatch


def parse_gitignore(gitignore_path):
    """Parse .gitignore file and return a list of patterns to exclude."""
    if not os.path.isfile(gitignore_path):
        return []

    patterns = []
    try:
        with open(gitignore_path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                # Skip empty lines and comments
                if line and not line.startswith("#"):
                    patterns.append(line)
    except Exception as e:
        print(f"Warning: Could not read .gitignore file: {e}")

    return patterns


def should_exclude(file_path, gitignore_patterns):
    """Check if a file should be excluded based on gitignore patterns."""
    # Convert to relative path for matching
    rel_path = file_path
    if rel_path.startswith("./"):
        rel_path = rel_path[2:]

    for pattern in gitignore_patterns:
        # Handle directory patterns (ending with /)
        if pattern.endswith("/"):
            if fnmatch.fnmatch(rel_path + "/", "*" + pattern) or fnmatch.fnmatch(
                rel_path + "/", pattern + "*"
            ):
                return True
        # Handle file patterns
        elif fnmatch.fnmatch(rel_path, pattern):
            return True

    return False


def main():
    if len(sys.argv) != 2:
        print("Usage: grapper <directory>")
        sys.exit(1)
    directory = sys.argv[1]
    if not os.path.isdir(directory):
        print(f"Error: {directory} is not a directory")
        sys.exit(1)
    os.chdir(directory)

    # Get directories to exclude from GRAPPER_EXCLUDE environment variable
    exclude_dirs = os.getenv("GRAPPER_EXCLUDE", "").split()

    # Parse .gitignore if it exists
    gitignore_patterns = parse_gitignore(".gitignore")
    if gitignore_patterns:
        print(
            f"Excluding patterns from .gitignore ({len(gitignore_patterns)} patterns)"
        )

    # Build the find command to exclude specified directories
    find_cmd = ["find", "."]
    for dir in exclude_dirs:
        find_cmd.extend(["-path", f"./{dir}", "-prune", "-o"])
    find_cmd.extend(["-type", "f", "-print"])

    # Run find to list files, excluding specified directories
    find_proc = subprocess.Popen(find_cmd, stdout=subprocess.PIPE, text=True)

    # Filter out files that match gitignore patterns
    all_files = find_proc.stdout.read().strip().split("\n")
    filtered_files = [f for f in all_files if not should_exclude(f, gitignore_patterns)]

    # If no files left after filtering
    if not filtered_files:
        print("No files found after applying exclusions")
        sys.exit(0)

    try:
        # Create a temporary file with the filtered list
        import tempfile

        with tempfile.NamedTemporaryFile(mode="w", delete=False) as temp:
            temp.write("\n".join(filtered_files))
            temp_filename = temp.name

        # Use the temporary file as input to fzf
        with open(temp_filename, "r") as temp:
            fzf_proc = subprocess.run(
                ["fzf", "--multi", "--preview", "cat {}", "--bind", "space:toggle"],
                stdin=temp,
                stdout=subprocess.PIPE,
                text=True,
            )

        # Clean up the temporary file
        os.unlink(temp_filename)
    except FileNotFoundError:
        print("Error: fzf is not installed")
        sys.exit(1)

    selected_files = fzf_proc.stdout.strip().split("\n")
    if not selected_files or selected_files == [""]:
        print("No files selected")
        sys.exit(0)

    markdown = ""
    for file in selected_files:
        if not os.path.isfile(file):
            print(f"Skipping {file}: not a file")
            continue
        try:
            with open(file, "r", encoding="utf-8") as f:
                content = f.read()
        except Exception as e:
            print(f"Skipping {file}: {e}")
            continue
        # Use file path without './' prefix for cleaner headers
        file_display = file[2:] if file.startswith("./") else file
        markdown += f"## {file_display}\n\n{content}\n\n"
    markdown += "## END OF FILE\n"

    # Print the markdown
    print(markdown)

    # Ask user if they want to copy to clipboard
    copy_to_clipboard = input("Copy to clipboard? (y/n): ").strip().lower()
    if copy_to_clipboard == "y" or copy_to_clipboard == "yes":
        try:
            # Detect platform and use appropriate clipboard command
            if sys.platform == "darwin":  # macOS
                clipboard_proc = subprocess.Popen(["pbcopy"], stdin=subprocess.PIPE)
                clipboard_proc.communicate(markdown.encode("utf-8"))
                print("Copied to clipboard!")
            elif sys.platform == "win32":  # Windows
                clipboard_proc = subprocess.Popen(["clip"], stdin=subprocess.PIPE)
                clipboard_proc.communicate(markdown.encode("utf-8"))
                print("Copied to clipboard!")
            elif sys.platform.startswith("linux"):  # Linux
                # Try xclip first, then xsel
                try:
                    clipboard_proc = subprocess.Popen(
                        ["xclip", "-selection", "clipboard"], stdin=subprocess.PIPE
                    )
                    clipboard_proc.communicate(markdown.encode("utf-8"))
                    print("Copied to clipboard!")
                except FileNotFoundError:
                    try:
                        clipboard_proc = subprocess.Popen(
                            ["xsel", "--clipboard", "--input"], stdin=subprocess.PIPE
                        )
                        clipboard_proc.communicate(markdown.encode("utf-8"))
                        print("Copied to clipboard!")
                    except FileNotFoundError:
                        print(
                            "Error: Neither xclip nor xsel is installed. Please install one of them to use clipboard functionality."
                        )
            else:
                print(f"Clipboard functionality not supported on {sys.platform}")
        except Exception as e:
            print(f"Failed to copy to clipboard: {e}")


if __name__ == "__main__":
    main()
